---
interface Props {
  title: string;
}

import Navigation from "../components/utilities/Navigation.astro";
import Footer from "../components/utilities/Footer.astro";

import "../base.css";

const { title } = Astro.props;
const description = "Seo description for wbsite";
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en" x-cloak x-data :class="{ 'dark': $store.theme.isDark }">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <!-- General -->

    <link href={canonicalURL} rel="canonical" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
  </head>
  <body class="bg-white text-black dark:bg-black dark:text-white">
    <Navigation />
    <main>
      <slot />
    </main>
    <Footer />
    <script>
      import Alpine from "alpinejs";
      import collapse from "@alpinejs/collapse";

      Alpine.plugin(collapse);

      Alpine.store("theme", {
        isDark: false,

        init() {
          /* @ts-ignore */
          this.isDark = (() => {
            if (
              typeof localStorage !== undefined &&
              localStorage.getItem("theme")
            ) {
              return localStorage.getItem("theme") === "dark";
            }
            if (window.matchMedia("(prefer-color-scheme: dark)").matches) {
              return true;
            }
            return false;
          })();
        },

        toggle() {
          /* @ts-ignore */
          this.isDark = !this.isDark;
          /* @ts-ignore */
          localStorage.setItem("theme", this.isDark ? "dark" : "light");
        },
      });

      window.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>
</html>
